DELIMITER $$

CREATE DATABASE IF NOT EXISTS db_anhembi_bolao $$
USE db_anhembi_bolao $$

CREATE TABLE IF NOT EXISTS TB_LOJA(
	LOJ_INT_ID INT NOT NULL AUTO_INCREMENT,
	LOJ_STR_NOME  VARCHAR(100) NOT NULL,
	LOJ_STR_CODIGO CHAR(5) NOT NULL ,
	PRIMARY KEY (LOJ_INT_ID)
); $$


CREATE TABLE IF NOT EXISTS TB_CUPOM(
	CUP_INT_ID INT NOT NULL AUTO_INCREMENT,
	CUP_INT_PONTOS INT NOT NULL,
	CUP_INT_DESCONTO INT NOT NULL,
	CUP_DT_VENCIMENTO DATE,
	CUP_STR_CODIGO CHAR(5) NOT NULL,
	LOJ_INT_ID INT NOT NULL,
	PRIMARY KEY (CUP_INT_ID),
	CONSTRAINT FK_LOJA
	FOREIGN KEY (LOJ_INT_ID)
	REFERENCES TB_LOJA (LOJ_INT_ID)
); $$



CREATE TABLE IF NOT EXISTS TB_TIPO_USUARIO (
	TP_INT_ID INT NOT NULL AUTO_INCREMENT,
	TP_STR_CODIGO CHAR(4) NOT NULL,
	PRIMARY KEY (TP_INT_ID)
); $$

CREATE TABLE IF NOT EXISTS TB_USUARIO (
  USU_INT_ID INT NOT NULL AUTO_INCREMENT,
  USU_STR_NOME VARCHAR(100) NOT NULL,
  USU_STR_EMAIL VARCHAR(155) NOT NULL,
  USU_STR_SENHA CHAR(11) NOT NULL,
  TP_INT_ID INT NOT NULL,
  PRIMARY KEY (USU_INT_ID),
  UNIQUE INDEX UNIQUE_USU_EMAIL (USU_STR_EMAIL ASC),
  CONSTRAINT FK_TIPO_USUARIO 
  FOREIGN KEY (TP_INT_ID)
  REFERENCES TB_TIPO_USUARIO (TP_INT_ID)
); $$

CREATE TABLE IF NOT EXISTS TB_TIME (
  TIM_INT_ID INT NOT NULL AUTO_INCREMENT,
  TIM_STR_NOME VARCHAR(100) NOT NULL, 
  TIM_STR_CODIGO CHAR(4),
  PRIMARY KEY (TIM_INT_ID)
); $$

CREATE TABLE IF NOT EXISTS TB_JOGO (
  JOG_INT_ID INT NOT NULL AUTO_INCREMENT,
  JOG_DT_HORARIO DATETIME NOT NULL,
  JOG_INT_T1 INT NULL,
  JOG_INT_T2 INT NULL,
  T1_INT_ID INT NOT NULL,
  T2_INT_ID INT NOT NULL,
  PRIMARY KEY (JOG_INT_ID),
  CONSTRAINT FK_TIME1 
  FOREIGN KEY (T1_INT_ID)
  REFERENCES TB_TIME (TIM_INT_ID),
  CONSTRAINT FK_TIME2
  FOREIGN KEY (T2_INT_ID)
  REFERENCES TB_TIME (TIM_INT_ID)
); $$

CREATE TABLE IF NOT EXISTS TB_PARTICIPANTE (
  PAR_INT_ID INT NOT NULL AUTO_INCREMENT,
  USU_INT_ID INT NOT NULL,
  PAR_INT_PONTOS INT NOT NULL,
  PRIMARY KEY (PAR_INT_ID),
  UNIQUE INDEX UNIQUE_USU_ID (USU_INT_ID ASC),
  CONSTRAINT FK_USUARIO
    FOREIGN KEY (USU_INT_ID)
    REFERENCES TB_USUARIO (USU_INT_ID)
); $$

CREATE TABLE IF NOT EXISTS TB_PALPITE (
  PAL_INT_ID INT NOT NULL AUTO_INCREMENT,
  PAL_INT_T1 INT NOT NULL,
  PAL_INT_T2 INT NOT NULL,
  PAR_INT_ID INT NOT NULL,
  JOG_INT_ID INT NOT NULL,
 PRIMARY KEY (PAL_INT_ID),
 UNIQUE INDEX UNIQUE_PAR_JOG_ID (PAR_INT_ID, JOG_INT_ID),
  CONSTRAINT FK_PALPITE
    FOREIGN KEY (PAR_INT_ID)
    REFERENCES TB_PARTICIPANTE (PAR_INT_ID),
  CONSTRAINT FK_JOGO_PALPITE
    FOREIGN KEY (JOG_INT_ID)
    REFERENCES TB_JOGO (JOG_INT_ID)
); $$

CREATE TABLE IF NOT EXISTS TB_RESGATE(
	RES_INT_ID INT NOT NULL AUTO_INCREMENT,
	PAR_INT_ID INT NOT NULL,
	CUP_INT_ID INT NOT NULL,
	PRIMARY KEY(RES_INT_ID),
	UNIQUE INDEX UNIQUE_PARTCIPANTE_CUPOM (PAR_INT_ID, CUP_INT_ID),	
	CONSTRAINT FK_RESGATE_PARTICIPANTE
	FOREIGN KEY (PAR_INT_ID)
	REFERENCES TB_PARTICIPANTE(PAR_INT_ID),
	CONSTRAINT FK_RESGATE_CUPOM
	FOREIGN KEY (CUP_INT_ID)
	REFERENCES TB_CUPOM (CUP_INT_ID)
); $$

CREATE PROCEDURE SP_USUARIO_IN_UP(
  IN pNOME VARCHAR(100),
  IN pSENHA VARCHAR(11),
  IN pEMAIL VARCHAR(155),
  IN pID INT,
  IN pTP_ID INT
)
BEGIN
  DECLARE VId INT;
  IF EXISTS(
      SELECT 1 FROM TB_USUARIO 
      WHERE USU_STR_EMAIL = pEMAIL 
      AND (pID IS NULL OR USU_INT_ID <> pID)
  ) THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Erro: E-mail já cadastrado para outro usuário.';
  ELSE
    IF EXISTS(SELECT 1 FROM TB_USUARIO WHERE USU_INT_ID = pID) THEN
      UPDATE TB_USUARIO
      SET USU_STR_NOME = pNOME,
          USU_STR_EMAIL = pEMAIL,
          USU_STR_SENHA = pSENHA
      WHERE USU_INT_ID = pID;
    ELSE
      INSERT INTO TB_USUARIO (
          USU_STR_NOME,
          USU_STR_EMAIL,
          USU_STR_SENHA,
          TP_INT_ID
      ) VALUES (
          pNOME,
          pEMAIL,
          pSENHA,
          pTP_ID
      );
     SET vId = LAST_INSERT_ID();
    END IF;
  END IF;
 IF pTP_ID = 2 THEN
 	INSERT INTO TB_PARTICIPANTE (USU_INT_ID, PAR_INT_PONTOS) VALUES (vId, 0);
 END IF;
END $$

CREATE PROCEDURE SP_USUARIO_FIND_BY_ID (
	IN pID INT
)
BEGIN 
	SELECT usuario.*, tipo.* FROM TB_USUARIO AS usuario
	INNER JOIN TB_TIPO_USUARIO tipo ON tipo.TP_INT_ID = usuario.TP_INT_ID
	WHERE USU_INT_ID = pID;
END $$

CREATE PROCEDURE SP_USUARIO_LOGIN (
	IN pEMAIL VARCHAR(155),
	IN pSENHA CHAR(11)
)
BEGIN 
	SELECT usuario.*, tipo.* FROM TB_USUARIO AS usuario
	INNER JOIN TB_TIPO_USUARIO tipo ON tipo.TP_INT_ID = usuario.TP_INT_ID
	WHERE USU_STR_EMAIL = pEMAIL AND USU_STR_SENHA = pSENHA;
END $$


CREATE PROCEDURE SP_BOLAO_IN_UP(
    IN pID INT,
    IN pTITULO VARCHAR(100),
    IN pCRIACAO DATE,
    IN pPREMIO DOUBLE,
    IN pJOG_ID INT
)
BEGIN
     IF EXISTS(SELECT 1 FROM TB_BOLAO WHERE BOL_INT_ID = pID) THEN 
        UPDATE TB_BOLAO
        SET BOL_STR_TITULO = pTITULO, 
            BOL_DT_CRIACAO = pCRIACAO, 
            BOL_DOU_PREMIO = pPREMIO
        WHERE BOL_INT_ID = pID;
    ELSE
 		INSERT INTO TB_BOLAO (BOL_STR_TITULO, BOL_DT_CRIACAO, BOL_DOU_PREMIO, JOG_INT_ID) 
        VALUES (pTITULO, pCRIACAO, pPREMIO, pJOG_ID);       
    END IF;
END $$

CREATE PROCEDURE SP_BOLAO_FIND_BY_ID(
	IN pID INT
)
BEGIN  
	SELECT * FROM TB_BOLAO
	WHERE BOL_INT_ID = pID;
END $$

CREATE PROCEDURE SP_TIME_IN_UP(
    IN pID INT,
    IN pNOME VARCHAR(100),
    IN pCODIGO CHAR(4)
)
BEGIN
     IF EXISTS(SELECT 1 FROM TB_TIME WHERE TIM_INT_ID = pID) THEN 
        UPDATE TB_TIME
        SET TIM_STR_NOME = pNOME, 
            TIM_STR_CODIGO = pCODIGO
        WHERE TIM_INT_ID = pID;
    ELSE
 		INSERT INTO TB_TIME (TIM_STR_NOME, TIM_STR_CODIGO) 
        VALUES (pNOME, pCODIGO);       
    END IF;
END $$

CREATE PROCEDURE SP_TIME_FIND_ALL(
    IN pNOME VARCHAR(100)
)
BEGIN
    IF pNOME IS NOT NULL THEN
        SELECT * FROM TB_TIME WHERE TIM_STR_NOME LIKE CONCAT(pNOME,'%');
    ELSE
        SELECT * FROM TB_TIME;
    END IF;
END $$

CREATE PROCEDURE SP_TIME_FIND_BY_ID(
	IN pID INT
)
BEGIN  
	SELECT * FROM TB_TIME
	WHERE TIM_INT_ID = pID;
END $$

-- INGESTÃO DE TIMES --

CALL SP_TIME_IN_UP(NULL,'Palmeiras', 'PAL');$$
CALL SP_TIME_IN_UP(NULL,'Flamengo', 'FLA');$$
CALL SP_TIME_IN_UP(NULL,'São Paulo',  'SAO');$$
CALL SP_TIME_IN_UP(NULL,'Santos','SAN');$$
CALL SP_TIME_IN_UP(NULL,'Corinthians', 'COR');$$
CALL SP_TIME_IN_UP(NULL,'Vasco da Gama', 'VAS');$$
CALL SP_TIME_IN_UP(NULL,'Botafogo', 'BOT');$$
CALL SP_TIME_IN_UP(NULL,'Atlético Mineiro', 'CAM');$$
CALL SP_TIME_IN_UP(NULL,'Cruzeiro', 'CRU');$$
CALL SP_TIME_IN_UP(NULL, 'Internacional', 'INT');$$
CALL SP_TIME_IN_UP(NULL, 'Grêmio','GRE');$$
CALL SP_TIME_IN_UP(NULL, 'Bahia', 'BAH');$$
CALL SP_TIME_IN_UP(NULL, 'Ceará', 'CEA');$$
CALL SP_TIME_IN_UP(NULL, 'Fortaleza', 'FOR');$$
CALL SP_TIME_IN_UP(NULL, 'Atlético Paranaense', 'CAP');$$
CALL SP_TIME_IN_UP(NULL, 'Coritiba', 'CFC');$$
CALL SP_TIME_IN_UP(NULL, 'Vitoria', 'VIT');$$
CALL SP_TIME_IN_UP(NULL, 'Chapecoense', 'CHA');$$
CALL SP_TIME_IN_UP(NULL, 'Sport', 'SPO');$$
CALL SP_TIME_IN_UP(NULL, 'Sampaio Corrêa', 'SAM');$$
CALL SP_TIME_IN_UP(NULL, 'Bragantino', 'BRA');$$

CREATE PROCEDURE SP_JOGO_IN_UP (
  IN pID INT,
  IN pHORARIO DATETIME,
  IN pT1 INT,
  IN pT2 INT,
  IN pT1_ID INT,
  IN pT2_ID INT
)
BEGIN
 
  IF EXISTS (
    SELECT 1
    FROM TB_JOGO j
    WHERE j.JOG_DT_HORARIO = pHORARIO
      AND j.T1_INT_ID = pT1_ID
      AND j.T2_INT_ID = pT2_ID
      AND (pID IS NULL OR j.JOG_INT_ID <> pID)
  ) THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Erro: Já existe um jogo para esses dois times cadastrado nesta data.';
  END IF;

  IF pT1_ID = pT2_ID THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Erro: Os times precisam ser diferentes.';
  END IF;

  IF EXISTS (
    SELECT 1
    FROM TB_JOGO
    WHERE JOG_INT_ID = pID
  ) THEN
    UPDATE TB_JOGO
    SET JOG_DT_HORARIO = pHORARIO,
        JOG_INT_T1 = pT1,
        JOG_INT_T2 = pT2,
        T1_INT_ID = pT1_ID,
        T2_INT_ID = pT2_ID
    WHERE JOG_INT_ID = pID;
  ELSE
    INSERT INTO TB_JOGO (
      JOG_DT_HORARIO,
      JOG_INT_T1,
      JOG_INT_T2,
      T1_INT_ID,
      T2_INT_ID
    )
    VALUES
    (pHORARIO, pT1, pT2, pT1_ID, pT2_ID);
   
   SELECT LAST_INSERT_ID() AS JOG_INT_ID;
  END IF;
END $$

CREATE PROCEDURE SP_PALPITE_IN_UP(
	IN pID INT,
	IN pT1 INT,
	IN pT2 INT,
	IN pPAR_ID INT,
	IN pJOG_ID INT
)
BEGIN
	IF EXISTS(SELECT 1 FROM TB_PALPITE WHERE PAL_INT_ID = pID) THEN 
		UPDATE TB_PALPITE SET PAL_INT_T1 = pT1,
			PAL_INT_T2 = pT2
		WHERE PAL_INT_ID = pID;
	ELSE
		INSERT INTO TB_PALPITE (PAL_INT_T1, PAL_INT_T2, PAR_INT_ID, JOG_INT_ID) 
		VALUES(pT1, pT2, pPAR_ID, pJOG_ID);
	END IF;
END $$

CREATE PROCEDURE SP_PALPITE_FIND_BY_PARTICIPANTE(
	IN pPAR_ID INT
)
BEGIN
	SELECT palpite.*,
		t1.TIM_INT_ID AS TIM1_INT_ID,
		t1.TIM_STR_NOME AS TIM1_STR_NOME,
		t1.TIM_STR_CODIGO AS TIM1_STR_CODIGO,
		t2.TIM_INT_ID AS TIM2_INT_ID,
		t2.TIM_STR_NOME AS TIM2_STR_NOME,
		t2.TIM_STR_CODIGO AS TIM2_STR_CODIGO,
		participante.*,
		jogo.*
	FROM TB_PALPITE AS palpite
	INNER JOIN TB_PARTICIPANTE AS participante ON participante.PAR_INT_ID = palpite.PAR_INT_ID
	INNER JOIN TB_JOGO AS jogo ON jogo.JOG_INT_ID = palpite.JOG_INT_ID
	INNER JOIN TB_TIME t1 ON t1.TIM_INT_ID = jogo.T1_INT_ID
	INNER JOIN TB_TIME t2 ON t2.TIM_INT_ID = jogo.T2_INT_ID
	WHERE participante.PAR_INT_ID = pPAR_ID;
END $$

CREATE PROCEDURE SP_PALPITE_DELETE(
	IN pPAL_ID INT
)
BEGIN
	DELETE FROM TB_PALPITE WHERE PAL_INT_ID = pPAL_ID;
END $$

CREATE PROCEDURE SP_PARTICIPANTE_IN_UP(
	IN pID INT,
	IN pUSU_INT_ID INT,
	IN pPONTOS INT
)
BEGIN
	IF EXISTS (
  SELECT
    1
  FROM
    TB_PARTICIPANTE
  WHERE
    PAR_INT_ID = pID
) THEN
  UPDATE TB_PARTICIPANTE SET PAR_INT_PONTOS = pPONTOS 
  WHERE PAR_INT_ID = pID;
ELSE
	INSERT INTO TB_PARTICIPANTE (USU_INT_ID, PAR_INT_PONTOS) 
  VALUES (pUSU_INT_ID, pPONTOS);
  SELECT LAST_INSERT_ID() AS PAR_INT_ID; 
END IF;
END $$

CREATE PROCEDURE SP_JOGO_FIND_ALL_BY_PARTICIPANTE(
    IN pPAR_ID INT,
    IN pDATA_ATUAL DATETIME
)
BEGIN
    SELECT
        jogo.*,
        t1.TIM_INT_ID AS TIM1_INT_ID,
        t1.TIM_STR_NOME AS TIM1_STR_NOME,
        t1.TIM_STR_CODIGO AS TIM1_STR_CODIGO,
        t2.TIM_INT_ID AS TIM2_INT_ID,
        t2.TIM_STR_NOME AS TIM2_STR_NOME,
        t2.TIM_STR_CODIGO AS TIM2_STR_CODIGO
    FROM TB_JOGO AS jogo
    INNER JOIN TB_TIME t1 ON t1.TIM_INT_ID = jogo.T1_INT_ID
    INNER JOIN TB_TIME t2 ON t2.TIM_INT_ID = jogo.T2_INT_ID
    WHERE jogo.JOG_INT_ID NOT IN (
        SELECT palpite.JOG_INT_ID
        FROM TB_PALPITE as palpite
        WHERE palpite.PAR_INT_ID = pPAR_ID
    )
    AND TIMESTAMPDIFF(MINUTE, pDATA_ATUAL, jogo.JOG_DT_HORARIO) >= 15
    AND jogo.JOG_INT_T1 IS NULL
    AND jogo.JOG_INT_T2 IS NULL;
END $$

CREATE PROCEDURE SP_JOGO_FIND_ALL(
   
)
BEGIN
    SELECT
        jogo.*,
        t1.TIM_INT_ID AS TIM1_INT_ID,
        t1.TIM_STR_NOME AS TIM1_STR_NOME,
        t1.TIM_STR_CODIGO AS TIM1_STR_CODIGO,
        t2.TIM_INT_ID AS TIM2_INT_ID,
        t2.TIM_STR_NOME AS TIM2_STR_NOME,
        t2.TIM_STR_CODIGO AS TIM2_STR_CODIGO
    FROM TB_JOGO AS jogo
    INNER JOIN TB_TIME t1 ON t1.TIM_INT_ID = jogo.T1_INT_ID
    INNER JOIN TB_TIME t2 ON t2.TIM_INT_ID = jogo.T2_INT_ID;
END $$

CREATE PROCEDURE SP_JOGO_FIND_BY_ID(
	IN pJOG_ID INT
)
BEGIN
	SELECT
        jogo.*,
        t1.TIM_INT_ID AS TIM1_INT_ID,
        t1.TIM_STR_NOME AS TIM1_STR_NOME,
        t1.TIM_STR_CODIGO AS TIM1_STR_CODIGO,
        t2.TIM_INT_ID AS TIM2_INT_ID,
        t2.TIM_STR_NOME AS TIM2_STR_NOME,
        t2.TIM_STR_CODIGO AS TIM2_STR_CODIGO
    FROM TB_JOGO AS jogo
    INNER JOIN TB_TIME t1 ON t1.TIM_INT_ID = jogo.T1_INT_ID
    INNER JOIN TB_TIME t2 ON t2.TIM_INT_ID = jogo.T2_INT_ID
    WHERE jogo.JOG_INT_ID = pJOG_ID;
END$$



CREATE PROCEDURE SP_PARTICIPANTE_UP_VENCEDOR(
	IN pJOG_ID INT
) BEGIN
	UPDATE tb_participante AS participante
	JOIN tb_bolao AS bolao ON participante.BOL_INT_ID = bolao.BOL_INT_ID
	JOIN tb_jogo AS jogo ON bolao.JOG_INT_ID = jogo.JOG_INT_ID
	JOIN tb_palpite AS palpite ON palpite.PAR_INT_ID = participante.PAR_INT_ID 
	SET participante.PAR_BOL_VENCEDOR = TRUE
	WHERE palpite.PAL_INT_T1 = jogo.JOG_INT_T1 AND palpite.PAL_INT_T2 = jogo.JOG_INT_T2 
  	AND jogo.JOG_INT_ID = pJOG_ID; 
END$$

CREATE PROCEDURE SP_CUPOM_FIND_ALL(
	IN pPAR_ID INT
)
BEGIN
	SELECT cupom.*, loja.* FROM TB_CUPOM AS cupom
	INNER JOIN TB_LOJA AS loja ON loja.LOJ_INT_ID = cupom.LOJ_INT_ID
	WHERE cupom.CUP_INT_ID NOT IN (
	SELECT CUP_INT_ID FROM TB_RESGATE WHERE PAR_INT_ID = pPAR_ID);
END $$

CREATE PROCEDURE SP_CUPOM_FIND_BY_ID(
	IN pCUP_ID INT
)
BEGIN
	SELECT cupom.*, loja.* FROM TB_CUPOM AS cupom
	INNER JOIN TB_LOJA AS loja ON loja.LOJ_INT_ID = cupom.LOJ_INT_ID
	WHERE cupom.CUP_INT_ID = pCUP_ID;
END $$

CREATE PROCEDURE SP_RESGATE_FIND_ALL(
	IN pPAR_ID INT
)
BEGIN
	SELECT resgate.*, cupom.*, loja.* FROM TB_RESGATE AS resgate 
	INNER JOIN TB_CUPOM AS cupom ON cupom.CUP_INT_ID = resgate.CUP_INT_ID
	INNER JOIN TB_LOJA AS loja ON loja.LOJ_INT_ID = cupom.LOJ_INT_ID
	WHERE resgate.PAR_INT_ID = pPAR_ID;
END $$


CREATE PROCEDURE SP_PARTICIPANTE_FIND_BY_ID(
	IN pPAR_ID INT
)BEGIN
	SELECT * FROM TB_PARTICIPANTE WHERE PAR_INT_ID = pPAR_ID;
END $$

CREATE PROCEDURE SP_PARTICIPANTE_FIND_BY_USUARIO(
	IN pUSU_ID INT
)
BEGIN
	SELECT * FROM TB_PARTICIPANTE WHERE USU_INT_ID = pUSU_ID;
END $$


CREATE PROCEDURE SP_CUPOM_RESGATAR(
    IN pCUP_ID INT,  
    IN pPAR_ID INT
)
BEGIN
    DECLARE vPontosNecessarios INT;
    DECLARE vPontosParticipante INT;
    
    SELECT CUP_INT_PONTOS
    INTO vPontosNecessarios
    FROM TB_CUPOM
    WHERE CUP_INT_ID = pCUP_ID;

    SELECT PAR_INT_PONTOS
    INTO vPontosParticipante
    FROM TB_PARTICIPANTE
    WHERE PAR_INT_ID = pPAR_ID;
    
    IF vPontosParticipante >= vPontosNecessarios THEN
    
        INSERT INTO TB_RESGATE (PAR_INT_ID, CUP_INT_ID)
        VALUES (pPAR_ID, pCUP_ID);
        
        UPDATE TB_PARTICIPANTE
        SET PAR_INT_PONTOS = PAR_INT_PONTOS - vPontosNecessarios
        WHERE PAR_INT_ID = pPAR_ID;
        
    ELSE
        SIGNAL SQLSTATE '45000'
    	SET MESSAGE_TEXT = 'Erro: Pontos insuficientes para resgatar.';
    END IF;
END $$

CREATE PROCEDURE SP_PARTICIPANTE_UP_PONTOS(
    IN pJOG_ID INT
)
BEGIN
    DECLARE vT1_RESULTADO INT;
    DECLARE vT2_RESULTADO INT;
    DECLARE vVENCEDOR INT;

   
    SELECT JOG_INT_T1, JOG_INT_T2 INTO vT1_RESULTADO, vT2_RESULTADO
    FROM TB_JOGO WHERE JOG_INT_ID = pJOG_ID;

    SET vVENCEDOR = CASE 
                        WHEN vT1_RESULTADO > vT2_RESULTADO THEN 1
                        WHEN vT2_RESULTADO > vT1_RESULTADO THEN 2
                        ELSE 0
                    END;

    UPDATE TB_PARTICIPANTE AS participante
    JOIN TB_PALPITE AS palpite ON palpite.PAR_INT_ID = participante.PAR_INT_ID
    SET palpite.PAR_INT_PONTOS = participante.PAR_INT_PONTOS + 15
    WHERE palpite.JOG_INT_ID = pJOG_ID
    AND (
        (vVENCEDOR = 1 AND palpite.PAL_INT_T1 > palpite.PAL_INT_T2) OR
        (vVENCEDOR = 2 AND palpite.PAL_INT_T2 > palpite.PAL_INT_T1) OR
        (vVENCEDOR = 0 AND palpite.PAL_INT_T1 = palpite.PAL_INT_T2)
    );

    UPDATE TB_PARTICIPANTE AS participante
    JOIN TB_PALPITE AS palpite ON palpite.PAR_INT_ID = participante.PAR_INT_ID
    SET participante.PAR_INT_PONTOS = participante.PAR_INT_PONTOS + 30
    WHERE palpite.JOG_INT_ID = pJOG_ID
    AND palpite.PAL_INT_T1 = vT1_RESULTADO
    AND palpite.PAL_INT_T2 = vT2_RESULTADO;
END$$


-- INGESTÃO DE TIPO DE USUÁRIO --
INSERT INTO TB_TIPO_USUARIO VALUES(1, 'ADM'); $$
INSERT INTO TB_TIPO_USUARIO VALUES(2, 'PAR'); $$


-- INGESTÃO DE LOJA --
INSERT INTO TB_LOJA (LOJ_STR_NOME, LOJ_STR_CODIGO)
VALUES 
('Mercado Livre', 'MLV'),
('Amazon', 'AMZ'),
('Shopee', 'SHP'),
('Magazine Luiza', 'MGL'),
('Casas Bahia', 'CBH'); $$

INSERT INTO TB_CUPOM (CUP_INT_PONTOS, CUP_INT_DESCONTO, CUP_DT_VENCIMENTO, LOJ_INT_ID, CUP_STR_CODIGO)
VALUES
-- Cupons para Mercado Livre
(50, 10, '2024-12-31', 1, 'ML001'),
(100, 20, '2024-12-31', 1, 'ML002'),

-- Cupons para Amazon
(70, 15, '2024-11-30', 2, 'AM001'),
(120, 25, '2024-12-15', 2, 'AM002'),

-- Cupons para Shopee
(40, 5, '2024-10-31', 3, 'SH001'),
(80, 10, '2025-01-15', 3, 'SH002'),

-- Cupons para Magazine Luiza
(60, 10, '2024-12-01', 4, 'MLZ01'),
(150, 30, '2025-03-01', 4, 'MLZ02'),

-- Cupons para Casas Bahia
(30, 5, '2024-09-30', 5, 'CB001'),
(90, 20, '2025-02-28', 5, 'CB002'); $$


CALL SP_JOGO_IN_UP(NULL,'2024-12-01 14:00:00', NULL, NULL,1, 2); $$ -- Time 1 vs Time 2
CALL SP_JOGO_IN_UP(NULL,'2024-12-01 16:30:00', NULL, NULL, 3, 4); $$ -- Time 3 vs Time 4
CALL SP_JOGO_IN_UP(NULL,'2024-12-02 18:00:00', NULL, NULL, 2, 5); $$ -- Time 2 vs Time 5
CALL SP_JOGO_IN_UP(NULL,'2024-12-03 19:45:00', NULL, NULL, 1, 3); $$ -- Time 1 vs Time 3
CALL SP_JOGO_IN_UP(NULL,'2024-12-04 21:00:00', NULL, NULL, 4, 5); $$ -- Time 4 vs Time 5

CALL SP_USUARIO_IN_UP('admin', 'admin', 'admin@email.com', NULL, 1); $$

DELIMITER ;