DELIMITER $$

CREATE DATABASE IF NOT EXISTS db_bolao_anhembi $$
USE db_bolao_anhembi $$

CREATE TABLE IF NOT EXISTS TB_USUARIO (
  USU_INT_ID INT NOT NULL AUTO_INCREMENT,
  USU_STR_NOME VARCHAR(100) NOT NULL,
  USU_STR_EMAIL VARCHAR(155) NOT NULL,
  USU_STR_SENHA CHAR(11) NOT NULL,
  PRIMARY KEY (USU_INT_ID),
  UNIQUE INDEX usuario_email_UNIQUE (USU_STR_EMAIL ASC)
) $$

CREATE TABLE IF NOT EXISTS TB_BOLAO (
  BOL_INT_ID INT NOT NULL AUTO_INCREMENT,
  BOL_STR_TITULO VARCHAR(100) NOT NULL,
  BOL_DT_CRIACAO DATE NOT NULL,
  BOL_DOU_PREMIO DOUBLE NOT NULL,
  PRIMARY KEY (BOL_INT_ID)
) $$

CREATE TABLE IF NOT EXISTS TB_PARTICIPANTE (
  PAR_INT_ID INT NOT NULL AUTO_INCREMENT,
  USU_INT_ID INT NOT NULL,
  BOL_INT_ID INT NOT NULL,
  PAR_BOL_VENCEDOR BOOL NULL,
  PRIMARY KEY (PAR_INT_ID),
  UNIQUE (USU_INT_ID, BOL_INT_ID), 
  INDEX fk_tb_participante_tb_usuario1_idx (USU_INT_ID ASC),
  INDEX fk_tb_participante_tb_bolao1_idx (BOL_INT_ID ASC),
  CONSTRAINT fk_tb_participante_tb_usuario1
    FOREIGN KEY (USU_INT_ID)
    REFERENCES TB_USUARIO (USU_INT_ID),
  CONSTRAINT fk_tb_participante_tb_bolao1
    FOREIGN KEY (BOL_INT_ID)
    REFERENCES TB_BOLAO (BOL_INT_ID)
) $$

CREATE TABLE IF NOT EXISTS TB_PALPITE (
  PAL_INT_ID INT NOT NULL AUTO_INCREMENT,
  PAL_INT_T1 INT NOT NULL,
  PAL_INT_T2 INT NOT NULL,
  PAL_DATE_CRIACAO DATE NOT NULL,
  PAR_INT_ID INT NOT NULL,
  BOL_INT_ID INT NOT NULL,
  PRIMARY KEY (PAL_INT_ID),
  INDEX fk_TB_PALPITE_TB_PARTICIPANTE1_idx (PAR_INT_ID ASC),
  UNIQUE INDEX TB_PARTICIPANTE_PAR_INT_ID_UNIQUE (PAR_INT_ID ASC),
  INDEX fk_TB_PALPITE_TB_BOLAO1_idx (BOL_INT_ID ASC),
  CONSTRAINT fk_TB_PALPITE_TB_PARTICIPANTE1
    FOREIGN KEY (PAR_INT_ID)
    REFERENCES TB_PARTICIPANTE (PAR_INT_ID),
  CONSTRAINT fk_TB_PALPITE_TB_BOLAO1
    FOREIGN KEY (BOL_INT_ID)
    REFERENCES TB_BOLAO (BOL_INT_ID)
) $$

CREATE TABLE IF NOT EXISTS TB_TIME (
  TIM_INT_ID INT NOT NULL AUTO_INCREMENT,
  TIM_STR_NOME VARCHAR(100) NOT NULL,
  TIM_STR_URL_EMBLEMA VARCHAR(155) NOT NULL,
  PRIMARY KEY (TIM_INT_ID)
) $$

CREATE TABLE IF NOT EXISTS TB_JOGO (
  JOG_INT_ID INT NOT NULL AUTO_INCREMENT,
  JOG_DATE_DATA DATE NOT NULL,
  JOG_INT_T1 INT NULL,
  JOG_INT_T2 INT NULL,
  T1_INT_ID INT NOT NULL,
  T2_INT_ID INT NOT NULL,
  BOL_INT_ID INT NOT NULL,
  PRIMARY KEY (JOG_INT_ID),
  INDEX fk_tb_jogo_tb_time1_idx (T1_INT_ID ASC),
  INDEX fk_tb_jogo_tb_time2_idx (T2_INT_ID ASC),
  INDEX fk_tb_jogo_tb_bolao1_idx (BOL_INT_ID ASC),
  CONSTRAINT fk_tb_jogo_tb_time1
    FOREIGN KEY (T1_INT_ID)
    REFERENCES TB_TIME (TIM_INT_ID),
  CONSTRAINT fk_tb_jogo_tb_time2
    FOREIGN KEY (T2_INT_ID)
    REFERENCES TB_TIME (TIM_INT_ID),
  CONSTRAINT fk_tb_jogo_tb_bolao1
    FOREIGN KEY (BOL_INT_ID)
    REFERENCES TB_BOLAO (BOL_INT_ID)
) $$

CREATE PROCEDURE SP_USUARIO_IN_UP(
  IN pNOME VARCHAR(100),
  IN pSENHA VARCHAR(11),
  IN pEMAIL VARCHAR(155),
  IN pID INT
)
BEGIN
  IF EXISTS(
      SELECT 1 FROM TB_USUARIO 
      WHERE USU_STR_EMAIL = pEMAIL 
      AND (pID IS NULL OR USU_INT_ID <> pID)
  ) THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Erro: E-mail já cadastrado para outro usuário.';
  ELSE
    IF EXISTS(SELECT 1 FROM TB_USUARIO WHERE USU_INT_ID = pID) THEN
      UPDATE TB_USUARIO
      SET USU_STR_NOME = pNOME,
          USU_STR_EMAIL = pEMAIL,
          USU_STR_SENHA = pSENHA
      WHERE USU_INT_ID = pID;
    ELSE
      INSERT INTO TB_USUARIO (
          USU_STR_NOME,
          USU_STR_EMAIL,
          USU_STR_SENHA
      ) VALUES (
          pNOME,
          pEMAIL,
          pSENHA
      );
    END IF;
  END IF;
END $$

CREATE PROCEDURE SP_USUARIO_FIND_BY_ID (
	IN pID INT
)
BEGIN 
	SELECT * FROM TB_USUARIO
	WHERE USU_INT_ID = pID;
END $$

CREATE PROCEDURE SP_USUARIO_LOGIN (
	IN pEMAIL VARCHAR(155),
	IN pSENHA CHAR(11)
)
BEGIN 
	SELECT * FROM TB_USUARIO
	WHERE USU_STR_EMAIL = pEMAIL AND USU_STR_SENHA = pSENHA;
END $$

CREATE PROCEDURE SP_BOLAO_IN_UP(
    IN pID INT,
    IN pTITULO VARCHAR(100),
    IN pCRIACAO DATE,
    IN pPREMIO DOUBLE
)
BEGIN
     IF EXISTS(SELECT 1 FROM TB_BOLAO WHERE BOL_INT_ID = pID) THEN 
        UPDATE TB_BOLAO
        SET BOL_STR_TITULO = pTITULO, 
            BOL_DT_CRIACAO = pCRIACAO, 
            BOL_DOU_PREMIO = pPREMIO
        WHERE BOL_INT_ID = pID;
    ELSE
 		INSERT INTO TB_BOLAO (BOL_STR_TITULO, BOL_DT_CRIACAO, BOL_DOU_PREMIO) 
        VALUES (pTITULO, pCRIACAO, pPREMIO);       
    END IF;
END $$

CREATE PROCEDURE SP_BOLAO_FIND_BY_ID(
	IN pID INT
)
BEGIN  
	SELECT * FROM TB_BOLAO
	WHERE BOL_INT_ID = pID;
END $$

CREATE PROCEDURE SP_BOLAO_DELETE_BY_ID(
	IN pID INT
)
BEGIN  
	DELETE FROM TB_BOLAO
	WHERE BOL_INT_ID = pID;
END $$

CREATE PROCEDURE SP_TIME_IN_UP(
    IN pID INT,
    IN pNOME VARCHAR(100),
    IN pURL_EMBLEMA VARCHAR(155)
)
BEGIN
     IF EXISTS(SELECT 1 FROM TB_TIME WHERE TIM_INT_ID = pID) THEN 
        UPDATE TB_TIME
        SET TIM_STR_NOME = pNOME, 
            TIM_STR_URL_EMBLEMA = pURL_EMBLEMA
        WHERE TIM_INT_ID = pID;
    ELSE
 		INSERT INTO TB_TIME (TIM_STR_NOME, TIM_STR_URL_EMBLEMA) 
        VALUES (pNOME, pURL_EMBLEMA);       
    END IF;
END $$

CREATE PROCEDURE SP_TIME_FIND_ALL(
    IN pNOME VARCHAR(100)
)
BEGIN
    IF pNOME IS NOT NULL THEN
        SELECT * FROM TB_TIME WHERE TIM_STR_NOME LIKE CONCAT(pNOME,'%');
    ELSE
        SELECT * FROM TB_TIME;
    END IF;
END $$

CREATE PROCEDURE SP_TIME_FIND_BY_ID(
	IN pID INT
)
BEGIN  
	SELECT * FROM TB_TIME
	WHERE TIM_INT_ID = pID;
END $$

-- INGESTÃO DE TIMES --

CALL SP_TIME_IN_UP(NULL, 'Palmeiras', '/assets/emblemas/palmeiras.png');
CALL SP_TIME_IN_UP(NULL, 'Flamengo', '/assets/emblemas/flamengo.png');
CALL SP_TIME_IN_UP(NULL, 'São Paulo', '/assets/emblemas/sao_paulo.png');
CALL SP_TIME_IN_UP(NULL, 'Santos', '/assets/emblemas/santos.png');
CALL SP_TIME_IN_UP(NULL, 'Corinthians', '/assets/emblemas/corinthians.png');
CALL SP_TIME_IN_UP(NULL, 'Vasco da Gama', '/assets/emblemas/vasco.png');
CALL SP_TIME_IN_UP(NULL, 'Botafogo', '/assets/emblemas/botafogo.png');
CALL SP_TIME_IN_UP(NULL, 'Atlético Mineiro', '/assets/emblemas/atletico_mineiro.png');
CALL SP_TIME_IN_UP(NULL, 'Cruzeiro', '/assets/emblemas/cruzeiro.png');
CALL SP_TIME_IN_UP(NULL, 'Internacional', '/assets/emblemas/internacional.png');
CALL SP_TIME_IN_UP(NULL, 'Grêmio', '/assets/emblemas/gremio.png');
CALL SP_TIME_IN_UP(NULL, 'Bahia', '/assets/emblemas/bahia.png');
CALL SP_TIME_IN_UP(NULL, 'Ceará', '/assets/emblemas/ceara.png');
CALL SP_TIME_IN_UP(NULL, 'Fortaleza', '/assets/emblemas/fortaleza.png');
CALL SP_TIME_IN_UP(NULL, 'Atlético Paranaense', '/assets/emblemas/atletico_paranaense.png');
CALL SP_TIME_IN_UP(NULL, 'Coritiba', '/assets/emblemas/coritiba.png');
CALL SP_TIME_IN_UP(NULL, 'Vitoria', '/assets/emblemas/vitoria.png');
CALL SP_TIME_IN_UP(NULL, 'Chapecoense', '/assets/emblemas/chapecoense.png');
CALL SP_TIME_IN_UP(NULL, 'Sport', '/assets/emblemas/sport.png');
CALL SP_TIME_IN_UP(NULL, 'Sampaio Corrêa', '/assets/emblemas/sampaio_correa.png');
CALL SP_TIME_IN_UP(NULL, 'Bragantino', '/assets/emblemas/bragantino.png'); $$

CREATE PROCEDURE SP_JOGO_IN_UP (
  IN pID INT,
  IN pDATA DATE,
  IN pT1 INT,
  IN pT2 INT,
  IN pT1_ID INT,
  IN pT2_ID INT,
  IN pBOL_ID INT
) BEGIN IF NOT EXISTS (
  SELECT
    1
  FROM
    TB_TIME t
  WHERE
    t.TIM_INT_ID = pT1_ID
) THEN SIGNAL SQLSTATE '45000'
SET
  MESSAGE_TEXT = 'Erro: Time um não foi encontrado.';

END IF;

IF NOT EXISTS (
  SELECT
    1
  FROM
    TB_TIME t
  WHERE
    t.TIM_INT_ID = pT2_ID
) THEN SIGNAL SQLSTATE '45000'
SET
  MESSAGE_TEXT = 'Erro: Time dois não foi encontrado.';

END IF;

IF EXISTS (
  SELECT
    1
  FROM
    TB_JOGO j
  WHERE
    j.JOG_DATE_DATA = pDATA
    AND j.T1_INT_ID = pT1_ID
    AND j.T2_INT_ID = pT2_ID
    AND (
      pID IS NULL
      OR j.JOG_INT_ID <> pID
    )
) THEN SIGNAL SQLSTATE '45000'
SET
  MESSAGE_TEXT = 'Erro: Já existe um jogo para esses dois times cadastrado nesta data.';

END IF;

IF NOT EXISTS (
  SELECT
    1
  FROM
    TB_BOLAO b
  WHERE
    b.BOL_INT_ID = pBOL_ID
) THEN SIGNAL SQLSTATE '45000'
SET
  MESSAGE_TEXT = 'Erro: Bolão não foi encontrado.';

END IF;

IF EXISTS (
  SELECT
    1
  FROM
    TB_JOGO j
  WHERE
    j.BOL_INT_ID = pBOL_ID
    AND (
      pID IS NULL
      OR j.JOG_INT_ID <> pID
    )
) THEN SIGNAL SQLSTATE '45000'
SET
  MESSAGE_TEXT = 'Erro: Já existe um jogo para esse bolão.';

END IF;


IF pT1_ID = pT2_ID THEN SIGNAL SQLSTATE '45000'
SET
  MESSAGE_TEXT = 'Erro: Os times precisam ser diferentes.';

END IF;

IF EXISTS (
  SELECT
    1
  FROM
    TB_JOGO
  WHERE
    JOG_INT_ID = pID
) THEN 
UPDATE TB_JOGO
SET
  JOG_DATE_DATA = pDATA,
  JOG_INT_T1 = pT1,
  JOG_INT_T2 = pT2,
  T1_INT_ID = pT1_ID,
  T2_INT_ID = pT2_ID,
  BOL_INT_ID = pBOL_ID
WHERE
  JOG_INT_ID = pID;
ELSE
INSERT INTO
  TB_JOGO (
    JOG_DATE_DATA,
    JOG_INT_T1,
    JOG_INT_T2,
    T1_INT_ID,
    T2_INT_ID,
    BOL_INT_ID
  )
VALUES
  (pDATA, pT1, pT2, pT1_ID, pT2_ID, pBOL_ID);

END IF;
END $$

CREATE PROCEDURE SP_JOGO_FIND_BY_ID(
	IN pID INT
)
BEGIN
	SELECT jogo.*,
	t1.TIM_INT_ID AS TIM1_INT_ID,
	t1.TIM_STR_NOME AS TIM1_STR_NOME,
	t1.TIM_STR_URL_EMBLEMA AS TIM1_STR_URL_EMBLEMA,
	t2.TIM_INT_ID AS TIM2_INT_ID,
	t2.TIM_STR_NOME AS TIM2_STR_NOME,
	t2.TIM_STR_URL_EMBLEMA AS TIM2_STR_URL_EMBLEMA,
	bolao.*
	FROM TB_JOGO jogo 
	INNER JOIN TB_TIME t1 ON t1.TIM_INT_ID = jogo.T1_INT_ID
	INNER JOIN TB_TIME t2 ON t2.TIM_INT_ID = jogo.T2_INT_ID
	INNER JOIN TB_BOLAO bolao ON bolao.BOL_INT_ID = jogo.BOL_INT_ID
	WHERE JOG_INT_ID = pID;
END $$

CREATE PROCEDURE SP_JOGO_FIND_BY_BOLAO(
	IN pBOL_ID INT
)
BEGIN
	SELECT jogo.*,
	t1.TIM_INT_ID AS TIM1_INT_ID,
	t1.TIM_STR_NOME AS TIM1_STR_NOME,
	t1.TIM_STR_URL_EMBLEMA AS TIM1_STR_URL_EMBLEMA,
	t2.TIM_INT_ID AS TIM2_INT_ID,
	t2.TIM_STR_NOME AS TIM2_STR_NOME,
	t2.TIM_STR_URL_EMBLEMA AS TIM2_STR_URL_EMBLEMA,
	bolao.*
	FROM TB_JOGO jogo 
	INNER JOIN TB_TIME t1 ON t1.TIM_INT_ID = jogo.T1_INT_ID
	INNER JOIN TB_TIME t2 ON t2.TIM_INT_ID = jogo.T2_INT_ID
	INNER JOIN TB_BOLAO bolao ON bolao.BOL_INT_ID = jogo.BOL_INT_ID 
	WHERE BOL_INT_ID = pBOL_ID;
END $$

CREATE PROCEDURE SP_JOGO_DELETE_BY_ID(
	IN pID INT
)
BEGIN
	DELETE FROM TB_JOGO WHERE JOG_INT_ID = pID;
END $$

CREATE PROCEDURE SP_PARTICIPANTE_IN_UP(
	IN pID INT,
	IN pUSU_INT_ID INT,
	IN pBOL_INT_ID INT,
	IN pPAR_BOL_VENCEDOR BOOL
)
BEGIN
	IF EXISTS (
  SELECT
    1
  FROM
    TB_PARTICIPANTE
  WHERE
    PAR_INT_ID = pID
) THEN
  UPDATE TB_PARTICIPANTE SET PAR_BOL_VENCEDOR = pPAR_BOL_VENCEDOR 
  WHERE PAR_INT_ID = pID;
ELSE
	INSERT INTO TB_PARTICIPANTE (USU_INT_ID, BOL_INT_ID, PAR_BOL_VENCEDOR) 
  VALUES (pUSU_INT_ID, pBOL_INT_ID, false);
END IF;
END $$

CREATE PROCEDURE SP_PARTICIPANTE_FIND_BY_ID(
	IN pID INT
)
BEGIN
	SELECT * FROM TB_PARTICIPANTE participante
	INNER JOIN TB_USUARIO usuario ON usuario.USU_INT_ID = participante.USU_INT_ID
	INNER JOIN TB_BOLAO bolao ON bolao.BOL_INT_ID = participante.BOL_INT_ID
	WHERE participante.PAR_INT_ID = pID;
END $$

CREATE PROCEDURE SP_PARTICIPANTE_FIND_ALL_BY_USUARIO(
	IN pUSU_INT_ID INT
)
BEGIN
	SELECT * FROM TB_PARTICIPANTE participante
	INNER JOIN TB_USUARIO usuario ON usuario.USU_INT_ID = participante.USU_INT_ID
	INNER JOIN TB_BOLAO bolao ON bolao.BOL_INT_ID = participante.BOL_INT_ID
	WHERE participante.USU_INT_ID = pUSU_INT_ID;
END $$

CREATE PROCEDURE SP_PARTICIPANTE_FIND_ALL_BY_BOLAO(
	IN pBOL_INT_ID INT
)
BEGIN
	SELECT * FROM TB_PARTICIPANTE participante
	INNER JOIN TB_USUARIO usuario ON usuario.USU_INT_ID = participante.USU_INT_ID
	INNER JOIN TB_BOLAO bolao ON bolao.BOL_INT_ID = participante.BOL_INT_ID
	WHERE participante.BOL_INT_ID = pBOL_INT_ID;
END $$

CREATE PROCEDURE SP_PARTICIPANTE_DELETE_BY_ID(
	IN pID INT
)
BEGIN
	DELETE FROM TB_PALPITE
    WHERE PAR_INT_ID = pID;
   
    DELETE FROM TB_PARTICIPANTE
    WHERE PAR_INT_ID = pID;
END $$


DELIMITER ;