DELIMITER $$

CREATE DATABASE IF NOT EXISTS db_bolao_anhembi $$
USE db_bolao_anhembi $$

CREATE TABLE IF NOT EXISTS TB_TIPO_USUARIO (
	TP_INT_ID INT NOT NULL AUTO_INCREMENT,
	TP_STR_CODIGO CHAR(4) NOT NULL,
	PRIMARY KEY (TP_INT_ID)
); $$

CREATE TABLE IF NOT EXISTS TB_USUARIO (
  USU_INT_ID INT NOT NULL AUTO_INCREMENT,
  USU_STR_NOME VARCHAR(100) NOT NULL,
  USU_STR_EMAIL VARCHAR(155) NOT NULL,
  USU_STR_SENHA CHAR(11) NOT NULL,
  TP_INT_ID INT NOT NULL,
  PRIMARY KEY (USU_INT_ID),
  UNIQUE INDEX UNIQUE_USU_EMAIL (USU_STR_EMAIL ASC),
  CONSTRAINT FK_TIPO_USUARIO 
  FOREIGN KEY (TP_INT_ID)
  REFERENCES TB_TIPO_USUARIO (TP_INT_ID)
); $$

CREATE TABLE IF NOT EXISTS TB_TIME (
  TIM_INT_ID INT NOT NULL AUTO_INCREMENT,
  TIM_STR_NOME VARCHAR(100) NOT NULL,
  TIM_STR_CODIGO CHAR(4),
  PRIMARY KEY (TIM_INT_ID)
); $$

CREATE TABLE IF NOT EXISTS TB_JOGO (
  JOG_INT_ID INT NOT NULL AUTO_INCREMENT,
  JOG_DATE_DATA DATE NOT NULL,
  JOG_INT_T1 INT NULL,
  JOG_INT_T2 INT NULL,
  T1_INT_ID INT NOT NULL,
  T2_INT_ID INT NOT NULL,
  PRIMARY KEY (JOG_INT_ID),
  CONSTRAINT FK_TIME1 
  FOREIGN KEY (T1_INT_ID)
  REFERENCES TB_TIME (TIM_INT_ID),
  CONSTRAINT FK_TIME2
  FOREIGN KEY (T2_INT_ID)
  REFERENCES TB_TIME (TIM_INT_ID)
); $$



CREATE TABLE IF NOT EXISTS TB_BOLAO (
  BOL_INT_ID INT NOT NULL AUTO_INCREMENT,
  BOL_STR_TITULO VARCHAR(100) NOT NULL,
  BOL_DT_CRIACAO DATE NOT NULL,
  BOL_DOU_PREMIO DOUBLE NOT NULL,
  JOG_INT_ID INT NOT NULL,
  PRIMARY KEY (BOL_INT_ID),
  	CONSTRAINT FK_JOGO
  	FOREIGN KEY (JOG_INT_ID)
  	REFERENCES TB_JOGO (JOG_INT_ID)
); $$


CREATE TABLE IF NOT EXISTS TB_PARTICIPANTE (
  PAR_INT_ID INT NOT NULL AUTO_INCREMENT,
  USU_INT_ID INT NOT NULL,
  BOL_INT_ID INT NOT NULL,
  PAR_BOL_VENCEDOR BOOL NULL,
  PRIMARY KEY (PAR_INT_ID, BOL_INT_ID, USU_INT_ID),
  CONSTRAINT FK_USUARIO
    FOREIGN KEY (USU_INT_ID)
    REFERENCES TB_USUARIO (USU_INT_ID),
  CONSTRAINT FK_BOLAO
    FOREIGN KEY (BOL_INT_ID)
    REFERENCES TB_BOLAO (BOL_INT_ID)
); $$

CREATE TABLE IF NOT EXISTS TB_PALPITE (
  PAL_INT_ID INT NOT NULL AUTO_INCREMENT,
  PAL_INT_T1 INT NOT NULL,
  PAL_INT_T2 INT NOT NULL,
  PAL_DATE_CRIACAO DATE NOT NULL,
  PAR_INT_ID INT NOT NULL,
  BOL_INT_ID INT NOT NULL,
  PRIMARY KEY (PAL_INT_ID),
  UNIQUE INDEX UNIQUE_PAR_ID (PAR_INT_ID ASC),
  CONSTRAINT FK_PALPITE
    FOREIGN KEY (PAR_INT_ID)
    REFERENCES TB_PARTICIPANTE (PAR_INT_ID),
  CONSTRAINT FK_BOLAO
    FOREIGN KEY (BOL_INT_ID)
    REFERENCES TB_BOLAO (BOL_INT_ID)
); $$


CREATE PROCEDURE SP_USUARIO_IN_UP(
  IN pNOME VARCHAR(100),
  IN pSENHA VARCHAR(11),
  IN pEMAIL VARCHAR(155),
  IN pID INT,
  IN pTP_ID INT
)
BEGIN
  IF EXISTS(
      SELECT 1 FROM TB_USUARIO 
      WHERE USU_STR_EMAIL = pEMAIL 
      AND (pID IS NULL OR USU_INT_ID <> pID)
  ) THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Erro: E-mail já cadastrado para outro usuário.';
  ELSE
    IF EXISTS(SELECT 1 FROM TB_USUARIO WHERE USU_INT_ID = pID) THEN
      UPDATE TB_USUARIO
      SET USU_STR_NOME = pNOME,
          USU_STR_EMAIL = pEMAIL,
          USU_STR_SENHA = pSENHA
      WHERE USU_INT_ID = pID;
    ELSE
      INSERT INTO TB_USUARIO (
          USU_STR_NOME,
          USU_STR_EMAIL,
          USU_STR_SENHA,
          TP_INT_ID
      ) VALUES (
          pNOME,
          pEMAIL,
          pSENHA,
          pTP_ID
      );
    END IF;
  END IF;
END $$

CREATE PROCEDURE SP_USUARIO_FIND_BY_ID (
	IN pID INT
)
BEGIN 
	SELECT usuario.*, tipo.* FROM TB_USUARIO AS usuario
	INNER JOIN TB_TIPO_USUARIO tipo ON tipo.TP_INT_ID = usuario.TP_INT_ID
	WHERE USU_INT_ID = pID;
END $$

CREATE PROCEDURE SP_USUARIO_LOGIN (
	IN pEMAIL VARCHAR(155),
	IN pSENHA CHAR(11)
)
BEGIN 
	SELECT usuario.*, tipo.* FROM TB_USUARIO AS usuario
	INNER JOIN TB_TIPO_USUARIO tipo ON tipo.TP_INT_ID = usuario.TP_INT_ID
	WHERE USU_STR_EMAIL = pEMAIL AND USU_STR_SENHA = pSENHA;
END $$

CREATE PROCEDURE SP_USUARIO_LOGIN (
	IN pEMAIL VARCHAR(155),
	IN pSENHA CHAR(11)
)
BEGIN 
	SELECT usuario.*, tipo.* FROM TB_USUARIO AS usuario
	INNER JOIN TB_TIPO_USUARIO tipo ON tipo.TP_INT_ID = usuario.TP_INT_ID
	WHERE USU_STR_EMAIL = pEMAIL AND USU_STR_SENHA = pSENHA;
END $$

CREATE PROCEDURE SP_BOLAO_IN_UP(
    IN pID INT,
    IN pTITULO VARCHAR(100),
    IN pCRIACAO DATE,
    IN pPREMIO DOUBLE,
    IN pJOG_ID INT
)
BEGIN
     IF EXISTS(SELECT 1 FROM TB_BOLAO WHERE BOL_INT_ID = pID) THEN 
        UPDATE TB_BOLAO
        SET BOL_STR_TITULO = pTITULO, 
            BOL_DT_CRIACAO = pCRIACAO, 
            BOL_DOU_PREMIO = pPREMIO
        WHERE BOL_INT_ID = pID;
    ELSE
 		INSERT INTO TB_BOLAO (BOL_STR_TITULO, BOL_DT_CRIACAO, BOL_DOU_PREMIO, JOG_INT_ID) 
        VALUES (pTITULO, pCRIACAO, pPREMIO, pJOG_ID);       
    END IF;
END $$

CREATE PROCEDURE SP_BOLAO_FIND_BY_ID(
	IN pID INT
)
BEGIN  
	SELECT * FROM TB_BOLAO
	WHERE BOL_INT_ID = pID;
END $$

CREATE PROCEDURE SP_TIME_IN_UP(
    IN pID INT,
    IN pNOME VARCHAR(100),
    IN pURL_EMBLEMA VARCHAR(155),
    IN pCODIGO CHAR(4)
)
BEGIN
     IF EXISTS(SELECT 1 FROM TB_TIME WHERE TIM_INT_ID = pID) THEN 
        UPDATE TB_TIME
        SET TIM_STR_NOME = pNOME, 
            TIM_STR_URL_EMBLEMA = pURL_EMBLEMA,
            TIM_STR_CODIGO = pCODIGO
        WHERE TIM_INT_ID = pID;
    ELSE
 		INSERT INTO TB_TIME (TIM_STR_NOME, TIM_STR_URL_EMBLEMA, TIM_STR_CODIGO) 
        VALUES (pNOME, pURL_EMBLEMA, pCODIGO);       
    END IF;
END $$

CREATE PROCEDURE SP_TIME_FIND_ALL(
    IN pNOME VARCHAR(100)
)
BEGIN
    IF pNOME IS NOT NULL THEN
        SELECT * FROM TB_TIME WHERE TIM_STR_NOME LIKE CONCAT(pNOME,'%');
    ELSE
        SELECT * FROM TB_TIME;
    END IF;
END $$

CREATE PROCEDURE SP_TIME_FIND_BY_ID(
	IN pID INT
)
BEGIN  
	SELECT * FROM TB_TIME
	WHERE TIM_INT_ID = pID;
END $$

-- INGESTÃO DE TIMES --

CALL SP_TIME_IN_UP(NULL,'Palmeiras', '/assets/emblemas/palmeiras.png', 'PAL');$$
CALL SP_TIME_IN_UP(NULL,'Flamengo', '/assets/emblemas/flamengo.png', 'FLA');$$
CALL SP_TIME_IN_UP(NULL,'São Paulo', '/assets/emblemas/sao_paulo.png', 'SAO');$$
CALL SP_TIME_IN_UP(NULL,'Santos', '/assets/emblemas/santos.png', 'SAN');$$
CALL SP_TIME_IN_UP(NULL,'Corinthians', '/assets/emblemas/corinthians.png', 'COR');$$
CALL SP_TIME_IN_UP(NULL,'Vasco da Gama', '/assets/emblemas/vasco.png', 'VAS');$$
CALL SP_TIME_IN_UP(NULL,'Botafogo', '/assets/emblemas/botafogo.png', 'BOT');$$
CALL SP_TIME_IN_UP(NULL,'Atlético Mineiro', '/assets/emblemas/atletico_mineiro.png', 'CAM');$$
CALL SP_TIME_IN_UP(NULL,'Cruzeiro', '/assets/emblemas/cruzeiro.png', 'CRU');$$
CALL SP_TIME_IN_UP(NULL, 'Internacional', '/assets/emblemas/internacional.png', 'INT');$$
CALL SP_TIME_IN_UP(NULL, 'Grêmio', '/assets/emblemas/gremio.png', 'GRE');$$
CALL SP_TIME_IN_UP(NULL, 'Bahia', '/assets/emblemas/bahia.png', 'BAH');$$
CALL SP_TIME_IN_UP(NULL, 'Ceará', '/assets/emblemas/ceara.png', 'CEA');$$
CALL SP_TIME_IN_UP(NULL, 'Fortaleza', '/assets/emblemas/fortaleza.png', 'FOR');$$
CALL SP_TIME_IN_UP(NULL, 'Atlético Paranaense', '/assets/emblemas/atletico_paranaense.png', 'CAP');$$
CALL SP_TIME_IN_UP(NULL, 'Coritiba', '/assets/emblemas/coritiba.png', 'CFC');$$
CALL SP_TIME_IN_UP(NULL, 'Vitoria', '/assets/emblemas/vitoria.png', 'VIT');$$
CALL SP_TIME_IN_UP(NULL, 'Chapecoense', '/assets/emblemas/chapecoense.png', 'CHA');$$
CALL SP_TIME_IN_UP(NULL, 'Sport', '/assets/emblemas/sport.png', 'SPO');$$
CALL SP_TIME_IN_UP(NULL, 'Sampaio Corrêa', '/assets/emblemas/sampaio_correa.png', 'SAM');$$
CALL SP_TIME_IN_UP(NULL, 'Bragantino', '/assets/emblemas/bragantino.png', 'BRA');$$

CREATE PROCEDURE SP_JOGO_IN_UP (
  IN pID INT,
  IN pDATA DATE,
  IN pT1 INT,
  IN pT2 INT,
  IN pT1_ID INT,
  IN pT2_ID INT
)
BEGIN
 
  IF EXISTS (
    SELECT 1
    FROM TB_JOGO j
    WHERE j.JOG_DATE_DATA = pDATA
      AND j.T1_INT_ID = pT1_ID
      AND j.T2_INT_ID = pT2_ID
      AND (pID IS NULL OR j.JOG_INT_ID <> pID)
  ) THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Erro: Já existe um jogo para esses dois times cadastrado nesta data.';
  END IF;

  IF pT1_ID = pT2_ID THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Erro: Os times precisam ser diferentes.';
  END IF;

  IF EXISTS (
    SELECT 1
    FROM TB_JOGO
    WHERE JOG_INT_ID = pID
  ) THEN
    UPDATE TB_JOGO
    SET JOG_DATE_DATA = pDATA,
        JOG_INT_T1 = pT1,
        JOG_INT_T2 = pT2,
        T1_INT_ID = pT1_ID,
        T2_INT_ID = pT2_ID
    WHERE JOG_INT_ID = pID;
  ELSE
    INSERT INTO TB_JOGO (
      JOG_DATE_DATA,
      JOG_INT_T1,
      JOG_INT_T2,
      T1_INT_ID,
      T2_INT_ID
    )
    VALUES
    (pDATA, pT1, pT2, pT1_ID, pT2_ID);
   
   SELECT LAST_INSERT_ID() AS JOG_INT_ID;
  END IF;
END $$

CREATE PROCEDURE SP_PALPITE_IN_UP(
	IN pID INT,
	IN pT1 INT,
	IN pT2 INT,
	IN pCRIACAO DATE,
	IN pPAR_ID INT,
	IN pBOL_ID INT
)
BEGIN
	IF EXISTS(SELECT 1 FROM TB_PALPITE WHERE PAL_INT_ID = pID) THEN 
		UPDATE TB_PALPITE SET PAL_INT_T1 = pT1,
			PAL_INT_T2 = pT2
		WHERE PAL_INT_ID = pID;
	ELSE
		INSERT INTO TB_PALPITE (PAL_INT_T1, PAL_INT_T2, PAL_DATE_CRIACAO, PAR_INT_ID, BOL_INT_ID) 
		VALUES(pT1, pT2, pCRIACAO, pPAR_ID, pBOL_ID);
	END IF;
END $$

CREATE PROCEDURE SP_PALPITE_FIND_ALL_BY_USUARIO(
	IN pUSU_ID INT
)
BEGIN
	SELECT palpite.*,
		t1.TIM_INT_ID AS TIM1_INT_ID,
		t1.TIM_STR_NOME AS TIM1_STR_NOME,
		t1.TIM_STR_URL_EMBLEMA AS TIM1_STR_URL_EMBLEMA,
		t1.TIM_STR_CODIGO AS TIM1_STR_CODIGO,
		t2.TIM_INT_ID AS TIM2_INT_ID,
		t2.TIM_STR_NOME AS TIM2_STR_NOME,
		t2.TIM_STR_URL_EMBLEMA AS TIM2_STR_URL_EMBLEMA,
		t2.TIM_STR_CODIGO AS TIM2_STR_CODIGO,
		participante.*,
		bolao.*,
		jogo.*
	FROM TB_PALPITE AS palpite
	INNER JOIN TB_PARTICIPANTE AS participante ON participante.PAR_INT_ID = palpite.PAR_INT_ID
	INNER JOIN TB_BOLAO AS bolao ON bolao.BOL_INT_ID = participante.BOL_INT_ID
	INNER JOIN TB_JOGO AS jogo ON jogo.JOG_INT_ID = bolao.JOG_INT_ID
	INNER JOIN TB_TIME t1 ON t1.TIM_INT_ID = jogo.T1_INT_ID
	INNER JOIN TB_TIME t2 ON t2.TIM_INT_ID = jogo.T2_INT_ID
	WHERE participante.USU_INT_ID = pUSU_ID;
END $$

CREATE PROCEDURE SP_PALPITE_DELETE_BY_PAR_ID(
	IN pPAR_ID INT
)
BEGIN
	DELETE FROM TB_PALPITE WHERE PAR_INT_ID = pPAR_ID;
	
	DELETE FROM TB_PARTICIPANTE WHERE PAR_INT_ID = pPAR_ID;
END $$
CREATE PROCEDURE SP_PARTICIPANTE_IN_UP(
	IN pID INT,
	IN pUSU_INT_ID INT,
	IN pBOL_INT_ID INT,
	IN pPAR_BOL_VENCEDOR BOOL
)
BEGIN
	IF EXISTS (
  SELECT
    1
  FROM
    TB_PARTICIPANTE
  WHERE
    PAR_INT_ID = pID
) THEN
  UPDATE TB_PARTICIPANTE SET PAR_BOL_VENCEDOR = pPAR_BOL_VENCEDOR 
  WHERE PAR_INT_ID = pID;
ELSE
	INSERT INTO TB_PARTICIPANTE (USU_INT_ID, BOL_INT_ID, PAR_BOL_VENCEDOR) 
  VALUES (pUSU_INT_ID, pBOL_INT_ID, false);
  SELECT LAST_INSERT_ID() AS PAR_INT_ID; 
END IF;
END $$

CREATE PROCEDURE SP_BOLAO_FIND_ALL_BY_FILTROS(
    IN pUSU_ID INT,
    IN pDATA_ATUAL DATE
)
BEGIN
	   SELECT
	    bolao.*,
	    jogo.*,
	    t1.TIM_INT_ID AS TIM1_INT_ID,
	    t1.TIM_STR_NOME AS TIM1_STR_NOME,
	    t1.TIM_STR_URL_EMBLEMA AS TIM1_STR_URL_EMBLEMA,
	    t1.TIM_STR_CODIGO AS TIM1_STR_CODIGO,
	    t2.TIM_INT_ID AS TIM2_INT_ID,
	    t2.TIM_STR_NOME AS TIM2_STR_NOME,
	    t2.TIM_STR_URL_EMBLEMA AS TIM2_STR_URL_EMBLEMA,
	    t2.TIM_STR_CODIGO AS TIM2_STR_CODIGO
	FROM TB_BOLAO bolao
	INNER JOIN TB_JOGO jogo ON jogo.JOG_INT_ID = bolao.JOG_INT_ID
	INNER JOIN TB_TIME t1 ON t1.TIM_INT_ID = jogo.T1_INT_ID
	INNER JOIN TB_TIME t2 ON t2.TIM_INT_ID = jogo.T2_INT_ID
	WHERE bolao.BOL_INT_ID NOT IN (
	    SELECT participante.BOL_INT_ID
	    FROM TB_PARTICIPANTE participante
	    WHERE participante.USU_INT_ID = pUSU_ID
	)
	AND jogo.JOG_DATE_DATA > pDATA_ATUAL
	AND jogo.JOG_INT_T1 IS NULL
	AND jogo.JOG_INT_T2 IS NULL;
END$$

CREATE PROCEDURE SP_BOLAO_FIND_ALL(
)
BEGIN
	   SELECT
	    bolao.*,
	    jogo.*,
	    t1.TIM_INT_ID AS TIM1_INT_ID,
	    t1.TIM_STR_NOME AS TIM1_STR_NOME,
	    t1.TIM_STR_URL_EMBLEMA AS TIM1_STR_URL_EMBLEMA,
	    t1.TIM_STR_CODIGO AS TIM1_STR_CODIGO,
	    t2.TIM_INT_ID AS TIM2_INT_ID,
	    t2.TIM_STR_NOME AS TIM2_STR_NOME,
	    t2.TIM_STR_URL_EMBLEMA AS TIM2_STR_URL_EMBLEMA,
	    t2.TIM_STR_CODIGO AS TIM2_STR_CODIGO
	FROM TB_BOLAO bolao
	INNER JOIN TB_JOGO jogo ON jogo.JOG_INT_ID = bolao.JOG_INT_ID
	INNER JOIN TB_TIME t1 ON t1.TIM_INT_ID = jogo.T1_INT_ID
	INNER JOIN TB_TIME t2 ON t2.TIM_INT_ID = jogo.T2_INT_ID;
END$$

CREATE PROCEDURE SP_PARTICIPANTE_UP_VENCEDOR(
	IN pJOG_ID INT
) BEGIN
	UPDATE tb_participante AS participante
	JOIN tb_bolao AS bolao ON participante.BOL_INT_ID = bolao.BOL_INT_ID
	JOIN tb_jogo AS jogo ON bolao.JOG_INT_ID = jogo.JOG_INT_ID
	JOIN tb_palpite AS palpite ON palpite.PAR_INT_ID = participante.PAR_INT_ID 
	SET participante.PAR_BOL_VENCEDOR = TRUE
	WHERE palpite.PAL_INT_T1 = jogo.JOG_INT_T1 AND palpite.PAL_INT_T2 = jogo.JOG_INT_T2 
  	AND jogo.JOG_INT_ID = pJOG_ID; 
END$$

INSERT INTO TB_TIPO_USUARIO VALUES(1, 'ADM');
INSERT INTO TB_TIPO_USUARIO VALUES(2, 'PAR');

DELIMITER ;